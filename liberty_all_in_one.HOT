# This describes what is deployed by this template.
description: Deploys a simple Openstack Liberty (one node is the controller + the compute node) using a separate Puppet server

# This defines the minimum Heat version required by this template.
heat_template_version: 2015-10-15

# The resources section defines what OpenStack resources are to be deployed and
# how they should be configured.
resources:
  # Setting up resources (Instance and IP)
  puppet_server_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: ext-net

  controller_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: ext-net

  puppet_server:
    type: OS::Nova::Server
    properties:
      name: puppet-server
      flavor: baremetal
      image: CC-Ubuntu-OS
      key_name: { get_param: key_name }
      networks:
         - network: sharednet1
      scheduler_hints: { reservation: { get_param: reservation_id } }
      user_data_format: SOFTWARE_CONFIG
      software_config_transport: POLL_SERVER_HEAT

  controller:
    type: OS::Nova::Server
    properties:
      name: controller
      flavor: baremetal
      image: CC-Ubuntu-OS
      key_name: { get_param: key_name }
      networks:
         - network: sharednet1
      scheduler_hints: { reservation: { get_param: reservation_id } }
      user_data_format: SOFTWARE_CONFIG
      software_config_transport: POLL_SERVER_HEAT


  puppet_server_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: puppet_server_floating_ip }
      server_id: { get_resource: puppet_server }

  controller_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: controller_floating_ip }
      server_id: { get_resource: controller }

  # Configure hostname and /etc/hosts
  hosts_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
            #!/bin/bash
            echo "#Puppet needs to resolv server and client IP" >> /etc/hosts
            echo "$puppet_server_ip puppet-server puppet-server.openstacklocal" >> /etc/hosts
            echo "$puppet_server_ip puppetdb puppetdb.openstacklocal" >> /etc/hosts
            echo "$controller_ip controller controller.openstacklocal" >> /etc/hosts
          params:
            $puppet_server_ip: { get_attr: [puppet_server, first_address] }
            $controller_ip: { get_attr: [controller, first_address] }

  hosts_deploy:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      config: { get_resource: hosts_cfg }
      servers: { '0': { get_resource: controller },
                 '1': { get_resource: puppet_server }
               }
      signal_transport: HEAT_SIGNAL


  # Puppet agent installation on server (config and deploy)
  puppet_agent_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/sh
        apt-get update && apt-get install git
        cd /tmp
        wget -q http://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb && dpkg -i puppetlabs-release-pc1-trusty.deb
        wget https://apt.puppetlabs.com/pubkey.gpg && apt-key add pubkey.gpg
        apt-get update && apt-get install -y eatmydata lsb-release puppet-agent=1.5.2-1trusty

  puppet_agent_deploy:
    type: OS::Heat::SoftwareDeploymentGroup
    depends_on: hosts_deploy
    properties:
      config: { get_resource: puppet_agent_cfg }
      servers: { '0': { get_resource: controller },
                 '1': { get_resource: puppet_server }
               }
      signal_transport: HEAT_SIGNAL

  # Bootstrap Puppet Sever (config and deploy)
  puppet_bootstrap_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/sh
        cd /tmp
        #Clone g5k repo then copy hiera and modules
        git clone -b CC_test https://github.com/dloup/xp5k-openstack.git
        #git clone https://github.com/grid5000/xp5k-openstack.git
        export MODULE_DIR=xp5k-openstack/provision/puppet/modules
        export HIERA_TEMPLATES_DIR=xp5k-openstack/scenarios/liberty_starter_kit/hiera/templates
        export PUPPET_DIR=/etc/puppetlabs/code/environments
        mkdir $PUPPET_DIR/bootstrap
        cp -r $MODULE_DIR $PUPPET_DIR/bootstrap/
        cp -r $HIERA_TEMPLATES_DIR $PUPPET_DIR/bootstrap/hieradata
        #Generate Hiera data
        mv $PUPPET_DIR/bootstrap/hieradata/nodes/puppetserver.yaml $PUPPET_DIR/bootstrap/hieradata/nodes/puppet-server.openstacklocal.yaml
        mv $PUPPET_DIR/bootstrap/hieradata/nodes/controller.yaml $PUPPET_DIR/bootstrap/hieradata/nodes/controller.openstacklocal.yaml
        sed -i 's/host1/puppet-server.openstacklocal/g' $PUPPET_DIR/bootstrap/hieradata/nodes/puppet-server.openstacklocal.yaml
        echo "- controller.openstacklocal" >> $PUPPET_DIR/bootstrap/hieradata/nodes/puppet-server.openstacklocal.yaml
        #Bootstrap Puppet Server
        eatmydata /opt/puppetlabs/bin/puppet apply --environment bootstrap -e 'include xp,xp::locales,xp::puppet::server'
        sync

  puppet_bootstrap_deploy:
    type: OS::Heat::SoftwareDeployment
    depends_on: puppet_agent_deploy
    properties:
      config: { get_resource: puppet_bootstrap_cfg }
      server: { get_resource: puppet_server }
      signal_transport: HEAT_SIGNAL

  # Configure Openstack Puppet modules
  os_modules_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/sh
        cd /tmp
        export MODULE_DIR=xp5k-openstack/provision/puppet/modules
        export HIERA_TEMPLATES_DIR=xp5k-openstack/scenarios/liberty_starter_kit/hiera/templates
        export PUPPET_DIR=/etc/puppetlabs/code/environments
        #Get module
        SCENARIO_STARTER=xp5k-openstack/scenarios/liberty_starter_kit
        export PUPPETFILE=$SCENARIO_STARTER/Puppetfile
        export PUPPETFILE_DIR=$SCENARIO_STARTER/puppet/modules-openstack
        #apt-get install ruby ruby-dev
        gem install r10k --no-ri --no-rdoc
        r10k puppetfile install -v
        #Copy modules to prod env
        cp -r $MODULE_DIR $PUPPET_DIR/production/
        cp -r $SCENARIO_STARTER/puppet/modules-openstack $PUPPET_DIR/production/
        cp -r $SCENARIO_STARTER/puppet/modules/* $PUPPET_DIR/production/modules-scenario
        #Copy and update hiera data
        cp -r $PUPPET_DIR/bootstrap/hieradata/* $PUPPET_DIR/production/hieradata
        echo "scenario::openstack::admin_password: demo" >> $PUPPET_DIR/production/hieradata/nodes/controller.openstacklocal.yaml
        #Patch OS
        sed -i '24s/apache2/httpd/' $PUPPET_DIR/production/modules-openstack/horizon/manifests/params.pp
        sed -i 's/F78372A06FF50C80464FC1B4F7B8CEA6056E8E56/0A9AF2115F4687BD29803A206B73A36E6026DFCA/' $PUPPET_DIR/production/modules-openstack/rabbitmq/manifests/repo/apt.pp

  os_modules_deploy:
    type: OS::Heat::SoftwareDeployment
    depends_on: puppet_bootstrap_deploy
    properties:
      config: { get_resource: os_modules_cfg }
      server: { get_resource: puppet_server }
      signal_transport: HEAT_SIGNAL


  # Run Puppet agent
  puppet_run_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        /opt/puppetlabs/bin/puppet agent -t --server puppet-server.openstacklocal > /root/puppet.log 2>&1 || true
        # Configure scenario TODO : Add parameters to let user choose to exec or not this part
        source /root/openstack-openrc.sh
        ## Rules (allow SSH and ICMP)
        nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
        nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
        ## Public Bridge
        ovs-vsctl add-port br-ex eth0 && ip addr flush eth0 && dhclient -nw br-ex
        ## Create xs flavor
        nova flavor-create m1.xs auto 2048 4 2 --is-public True
        ## Images (Cirros and Debian)
        /usr/bin/wget -q -O /tmp/cirros.img http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
        /usr/bin/wget -q -O /tmp/debian.img http://cdimage.debian.org/cdimage/openstack/current-8/debian-8-openstack-amd64.qcow2
        glance image-create --name="Cirros" --disk-format=qcow2 --container-format=bare --property architecture=x86_64 --progress --file /tmp/cirros.img
        glance image-create --name="Debian Jessie 64-bit" --disk-format=qcow2 --container-format=bare --property architecture=x86_64 --progress --file /tmp/debian.img
        ## Network TODO : Do not use Chameleon Shared network
        neutron net-create public --shared --provider:physical_network external --provider:network_type flat --router:external True
        neutron net-create private
        neutron subnet-create public 10.140.80.0/22 --name public-subnet --allocation-pool start=10.140.80.60,end=10.140.80.65 --gateway 10.140.83.254  --disable-dhcp
        neutron subnet-create private 192.168.0.0/24 --name private-subnet --dns-nameserver 8.8.8.8 --allocation-pool start=192.168.0.100,end=192.168.0.200
        neutron router-create main_router
        neutron router-gateway-set main_router public
        neutron router-interface-add main_router private-subnet

  puppet_run_deploy:
    type: OS::Heat::SoftwareDeployment
    depends_on: os_modules_deploy
    properties:
      config: { get_resource: puppet_run_cfg }
      server: { get_resource: controller }
      signal_transport: HEAT_SIGNAL

# The parameters section gathers configuration from the user.
parameters:
  key_name:
    type: string
    description: Name of a KeyPair to enable SSH access to the instance
    default: default
    constraints:
    - custom_constraint: nova.keypair
  reservation_id:
    type: string
    description: ID of the Blazar reservation to use for launching instances.
    constraints:
    - custom_constraint: blazar.reservation

outputs:
  server_ip:
    description: Public IP address of the Puppet server
    value: { get_attr: [puppet_server_floating_ip, ip] }
