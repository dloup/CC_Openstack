# This describes what is deployed by this template.
description: Bootstrap Puppet server with Heat on Chameleon

# This defines the minimum Heat version required by this template.
heat_template_version: 2015-10-15

# The resources section defines what OpenStack resources are to be deployed and
# how they should be configured.
resources:
  # Setting up resources (Instance and IP)
  puppet_server_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: ext-net

  controller_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: ext-net

  puppet_server:
    type: OS::Nova::Server
    properties:
      name: puppet-server
      flavor: baremetal
      image: Ubuntu_heat
      key_name: { get_param: key_name }
      networks:
         - network: sharednet1
      scheduler_hints: { reservation: { get_param: reservation_id } }
      user_data_format: SOFTWARE_CONFIG
      software_config_transport: POLL_SERVER_HEAT

  controller:
    type: OS::Nova::Server
    properties:
      name: controller
      flavor: baremetal
      image: Ubuntu_heat
      key_name: { get_param: key_name }
      networks:
         - network: sharednet1
      scheduler_hints: { reservation: { get_param: reservation_id } }
      user_data_format: SOFTWARE_CONFIG
      software_config_transport: POLL_SERVER_HEAT


  puppet_server_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: puppet_server_floating_ip }
      server_id: { get_resource: puppet_server }

  controller_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: controller_floating_ip }
      server_id: { get_resource: controller }

  # Configure hostname and /etc/hosts
  hosts_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
            #!/bin/bash
            echo "#Puppet needs to resolv server and client IP" >> /etc/hosts
            echo "$puppet_server_ip puppet-server puppet-server.openstacklocal" >> /etc/hosts
            echo "$puppet_server_ip puppetdb puppetdb.openstacklocal" >> /etc/hosts
            echo "$controller_ip controller controller.openstacklocal" >> /etc/hosts
          params:
            $puppet_server_ip: { get_attr: [puppet_server, first_address] }
            $controller_ip: { get_attr: [controller, first_address] }

  hosts_deploy:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      config: { get_resource: hosts_cfg }
      servers: { '0': { get_resource: controller },
                 '1': { get_resource: puppet_server }
               }
      signal_transport: HEAT_SIGNAL


  # Puppet agent installation on server (config and deploy)
  puppet_agent_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/sh
        apt-get update && apt-get install git
        cd /tmp
        wget -q http://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb && dpkg -i puppetlabs-release-pc1-trusty.deb
        wget https://apt.puppetlabs.com/pubkey.gpg && apt-key add pubkey.gpg
        apt-get update && apt-get install -y eatmydata lsb-release puppet-agent=1.5.2-1trusty

  puppet_agent_deploy:
    type: OS::Heat::SoftwareDeploymentGroup
    depends_on: hosts_deploy
    properties:
      config: { get_resource: puppet_agent_cfg }
      servers: { '0': { get_resource: controller },
                 '1': { get_resource: puppet_server }
               }
      signal_transport: HEAT_SIGNAL

  # Bootstrap Puppet Sever (config and deploy)
  puppet_bootstrap_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/sh
        cd /tmp
        #Clone g5k repo then copy hiera and modules
        git clone https://github.com/pmorillon/xp5k-openstack.git
        export MODULE_DIR=xp5k-openstack/provision/puppet/modules
        export HIERA_TEMPLATES_DIR=xp5k-openstack/scenarios/liberty_starter_kit/hiera/templates
        export PUPPET_DIR=/etc/puppetlabs/code/environments
        mkdir $PUPPET_DIR/bootstrap
        cp -r $MODULE_DIR $PUPPET_DIR/bootstrap/
        cp -r $HIERA_TEMPLATES_DIR $PUPPET_DIR/bootstrap/hieradata
        #Generate Hiera data
        mv $PUPPET_DIR/bootstrap/hieradata/nodes/puppetserver.yaml $PUPPET_DIR/bootstrap/hieradata/nodes/puppet-server.openstacklocal.yaml
        mv $PUPPET_DIR/bootstrap/hieradata/nodes/controller.yaml $PUPPET_DIR/bootstrap/hieradata/nodes/controller.openstacklocal.yaml
        sed -i 's/host1/puppet-server.openstacklocal/g' $PUPPET_DIR/bootstrap/hieradata/nodes/puppet-server.openstacklocal.yaml
        echo "- controller.openstacklocal" >> $PUPPET_DIR/bootstrap/hieradata/nodes/puppet-server.openstacklocal.yaml
        #Bootstrap Puppet Server
        eatmydata /opt/puppetlabs/bin/puppet apply --environment bootstrap -e 'include xp,xp::locales,xp::puppet::server'
        sync
        #Testing simple module
        cp -r $PUPPET_DIR/bootstrap/* $PUPPET_DIR/production/
        mkdir -p $PUPPET_DIR/production/modules/test/manifests
        cat > $PUPPET_DIR/production/modules/test/manifests/init.pp << 'EOF'
        # Module:: test
        # Manifest:: init.pp
        #
        class test {
        # Resources
        #
          package {
            lighttpd:
              ensure => installed;
          }
        }
        EOF
        # For Tests
        cat > $PUPPET_DIR/production/hieradata/nodes/controller.openstacklocal.yaml << 'EOF'
        ---
        classes:
        - test
        EOF

  puppet_bootstrap_deploy:
    type: OS::Heat::SoftwareDeployment
    depends_on: puppet_agent_deploy
    properties:
      config: { get_resource: puppet_bootstrap_cfg }
      server: { get_resource: puppet_server }
      signal_transport: HEAT_SIGNAL


  # Run Puppet agent
  puppet_run_cfg:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/sh
        /opt/puppetlabs/bin/puppet agent -t --server puppet-server.openstacklocal || true 

  puppet_run_deploy:
    type: OS::Heat::SoftwareDeployment
    depends_on: puppet_bootstrap_deploy
    properties:
      config: { get_resource: puppet_run_cfg }
      server: { get_resource: controller }
      signal_transport: HEAT_SIGNAL

# The parameters section gathers configuration from the user.
parameters:
  key_name:
    type: string
    description: Name of a KeyPair to enable SSH access to the instance
    default: default
    constraints:
    - custom_constraint: nova.keypair
  reservation_id:
    type: string
    description: ID of the Blazar reservation to use for launching instances.
    constraints:
    - custom_constraint: blazar.reservation

outputs:
  server_ip:
    description: Public IP address of the Puppet server
    value: { get_attr: [puppet_server_floating_ip, ip] }
